// Code generated by protoc-gen-go. DO NOT EDIT.
// source: todo.proto

/*
Package todo is a generated protocol buffer package.

It is generated from these files:
	todo.proto

It has these top-level messages:
	TodoRequest
	TodoResponse
	TodoFilter
*/
package todo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TodoRequest struct {
	Id          int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Created     uint64 `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	List        string `protobuf:"bytes,6,opt,name=list" json:"list,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Priority    int32  `protobuf:"varint,4,opt,name=priority" json:"priority,omitempty"`
	Done        bool   `protobuf:"varint,5,opt,name=done" json:"done,omitempty"`
}

func (m *TodoRequest) Reset()                    { *m = TodoRequest{} }
func (m *TodoRequest) String() string            { return proto.CompactTextString(m) }
func (*TodoRequest) ProtoMessage()               {}
func (*TodoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TodoRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TodoRequest) GetCreated() uint64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *TodoRequest) GetList() string {
	if m != nil {
		return m.List
	}
	return ""
}

func (m *TodoRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TodoRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TodoRequest) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *TodoRequest) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type TodoResponse struct {
	Id      int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Success bool  `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *TodoResponse) Reset()                    { *m = TodoResponse{} }
func (m *TodoResponse) String() string            { return proto.CompactTextString(m) }
func (*TodoResponse) ProtoMessage()               {}
func (*TodoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TodoResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TodoResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type TodoFilter struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	All  bool   `protobuf:"varint,2,opt,name=all" json:"all,omitempty"`
	List string `protobuf:"bytes,3,opt,name=list" json:"list,omitempty"`
}

func (m *TodoFilter) Reset()                    { *m = TodoFilter{} }
func (m *TodoFilter) String() string            { return proto.CompactTextString(m) }
func (*TodoFilter) ProtoMessage()               {}
func (*TodoFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TodoFilter) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *TodoFilter) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *TodoFilter) GetList() string {
	if m != nil {
		return m.List
	}
	return ""
}

func init() {
	proto.RegisterType((*TodoRequest)(nil), "todo.TodoRequest")
	proto.RegisterType((*TodoResponse)(nil), "todo.TodoResponse")
	proto.RegisterType((*TodoFilter)(nil), "todo.TodoFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Todo service

type TodoClient interface {
	List(ctx context.Context, in *TodoFilter, opts ...grpc.CallOption) (Todo_ListClient, error)
	Add(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoResponse, error)
}

type todoClient struct {
	cc *grpc.ClientConn
}

func NewTodoClient(cc *grpc.ClientConn) TodoClient {
	return &todoClient{cc}
}

func (c *todoClient) List(ctx context.Context, in *TodoFilter, opts ...grpc.CallOption) (Todo_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Todo_serviceDesc.Streams[0], c.cc, "/todo.Todo/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Todo_ListClient interface {
	Recv() (*TodoRequest, error)
	grpc.ClientStream
}

type todoListClient struct {
	grpc.ClientStream
}

func (x *todoListClient) Recv() (*TodoRequest, error) {
	m := new(TodoRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoClient) Add(ctx context.Context, in *TodoRequest, opts ...grpc.CallOption) (*TodoResponse, error) {
	out := new(TodoResponse)
	err := grpc.Invoke(ctx, "/todo.Todo/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Todo service

type TodoServer interface {
	List(*TodoFilter, Todo_ListServer) error
	Add(context.Context, *TodoRequest) (*TodoResponse, error)
}

func RegisterTodoServer(s *grpc.Server, srv TodoServer) {
	s.RegisterService(&_Todo_serviceDesc, srv)
}

func _Todo_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TodoFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServer).List(m, &todoListServer{stream})
}

type Todo_ListServer interface {
	Send(*TodoRequest) error
	grpc.ServerStream
}

type todoListServer struct {
	grpc.ServerStream
}

func (x *todoListServer) Send(m *TodoRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _Todo_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.Todo/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).Add(ctx, req.(*TodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Todo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "todo.Todo",
	HandlerType: (*TodoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Todo_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Todo_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "todo.proto",
}

func init() { proto.RegisterFile("todo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xc1, 0x4e, 0xeb, 0x30,
	0x10, 0xac, 0x1b, 0xa7, 0x4d, 0xb7, 0x4f, 0x4f, 0x65, 0xc5, 0xc1, 0xca, 0x29, 0xca, 0x29, 0xa7,
	0x80, 0xe0, 0xc2, 0x95, 0x4b, 0x4f, 0x9c, 0x2c, 0x7e, 0xa0, 0xc4, 0x2b, 0x64, 0x29, 0x8a, 0x83,
	0xbd, 0x95, 0xe0, 0xbb, 0xf8, 0x41, 0x64, 0xa7, 0x6d, 0x2a, 0xc1, 0x6d, 0x66, 0xac, 0x9d, 0x9d,
	0x59, 0x03, 0xb0, 0x33, 0xae, 0x1d, 0xbd, 0x63, 0x87, 0x32, 0xe2, 0xfa, 0x5b, 0xc0, 0xf6, 0xd5,
	0x19, 0xa7, 0xe9, 0xe3, 0x48, 0x81, 0xf1, 0x3f, 0x2c, 0xad, 0x51, 0xa2, 0x12, 0x4d, 0xae, 0x97,
	0xd6, 0xa0, 0x82, 0x75, 0xe7, 0xe9, 0xc0, 0x64, 0xd4, 0xba, 0x12, 0x8d, 0xd4, 0x67, 0x8a, 0x08,
	0xb2, 0xb7, 0x81, 0xd5, 0xaa, 0x12, 0xcd, 0x46, 0x27, 0x8c, 0xb7, 0x90, 0xb3, 0xe5, 0x9e, 0xd4,
	0x32, 0x89, 0x13, 0xc1, 0x0a, 0xb6, 0x86, 0x42, 0xe7, 0xed, 0xc8, 0xd6, 0x0d, 0x2a, 0x4b, 0x6f,
	0xd7, 0x12, 0x96, 0x50, 0x8c, 0xde, 0x3a, 0x6f, 0xf9, 0x4b, 0xc9, 0xb4, 0xfb, 0xc2, 0xe3, 0x1e,
	0xe3, 0x06, 0x52, 0x79, 0x25, 0x9a, 0x42, 0x27, 0x5c, 0x3f, 0xc1, 0xbf, 0x29, 0x74, 0x18, 0xdd,
	0x10, 0xe8, 0xaf, 0xd4, 0xe1, 0xd8, 0x75, 0x14, 0x42, 0x4a, 0x52, 0xe8, 0x33, 0xad, 0xf7, 0x00,
	0x71, 0x72, 0x6f, 0x7b, 0x26, 0x1f, 0xbd, 0x99, 0x3e, 0x39, 0x4d, 0x6e, 0x74, 0xc2, 0xb8, 0x83,
	0xec, 0xd0, 0xf7, 0xa7, 0xb9, 0x08, 0x2f, 0x4d, 0xb3, 0xb9, 0xe9, 0xc3, 0x3b, 0xc8, 0xe8, 0x83,
	0x77, 0x20, 0x5f, 0x62, 0xf3, 0x5d, 0x9b, 0x4e, 0x3b, 0x7b, 0x97, 0x37, 0xb3, 0x72, 0x3a, 0x6e,
	0xbd, 0xb8, 0x17, 0xd8, 0x42, 0xf6, 0x6c, 0x0c, 0xfe, 0x7e, 0x2d, 0xf1, 0x5a, 0x9a, 0x8a, 0xd5,
	0x8b, 0xb7, 0x55, 0xfa, 0xad, 0xc7, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x08, 0xde, 0xc6,
	0xbb, 0x01, 0x00, 0x00,
}
